xx <- switch (x,
"ARABIA SAUDYJSKA"                = "SAUDI ARABIA",
"ARGENTYNA"                       = "ARGENTINA",
"AZERBEJDŻAN"                     = "AZERBAIJAN",
"BANGLADESZ"                      = "BANGLADESH",
"BELGIA"                          = "BELGIUM",
"BEZPAŃSTWOWIEC"                  = "STATELESS",
"BIAŁORUŚ"                        = "BELARUS",
"BOŚNIA I HERCEGOWINA"            = "BOSNIA AND HERZEGOVINA",
"BRAZYLIA"                        = "BRAZIL",
"BUŁGARIA"                        = "BULGARIA",
"CHINY"                           = "CHINA",
"CHORWACJA"                       = "CROATIA",
"CZECHY"                          = "CZECH REPUBLIC",
"DANIA"                           = "DENMARK",
"DOMINIKANA"                      = "DOMINICAN REPUBLIC",
"EGIPT"                           = "EGYPT",
"FILIPINY"                        = "PHILIPINES",
"FINLANDIA"                       = "FINLAND",
"FRANCJA"                         = "FRANCE",
"GRECJA"                          = "GREECE",
"GRUZJA"                          = "GEORGIA",
"GWATEMALA"                       = "GUATEMALA",
"HISZPANIA"                       = "SPAIN",
"HOLANDIA"                        = "NETHERLANDS",
"INDIE"                           = "INDIA",
"IRLANDIA"                        = "IRELAND",
"IZRAEL"                          = "ISRAEL",
"JAPONIA"                         = "JAPAN",
"KAZACHSTAN"                      = "KAZAKHSTAN",
"KENIA"                           = "KENYA",
"KIRGISTAN (KIRGIZJA)"            = "KYRGYZSTAN",
"KONGO"                           = "CONGO", # WHICH CONGO!!
"KOREA POŁUDNIOWA"                = "SOUTH KOREA",
"KUWEJT"                          = "KUWAIT",
"LITWA"                           = "LITHUANIA",
"ŁOTWA"                           = "LATVIA",
"MAROKO"                          = "MOROCO",
"MEKSYK"                          = "MEXICO",
"MOŁDAWIA"                        = "MOLDOVA",
"NIEMCY"                          = "GERMANY",
"NORWEGIA"                        = "NORWAY",
"PALESTYNA"                       = "PALESTINE",
"POLSKA"                          = "POLAND",
"PORTUGALIA"                      = "PORTUGAL",
"ROSJA"                           = "RUSSIA",
"RUMUNIA"                         = "ROMANIA",
"SINGAPUR"                        = "SINGAPORE",
"SŁOWACJA"                        = "SLOVAKIA",
"SZWECJA"                         = "SWEDEN",
"TADŻYKISTAN"                     = "TAJIKISTAN",
"TUNEZJA"                         = "TUNISIA",
"TURCJA"                          = "TURKEY",
"TURKMENISTAN (TURKMENIA)"        = "TURKMENISTAN",
"UKRAINA"                         = "UKRAINE",
"USA (STANY ZJEDNOCZONE AMERYKI)" = "USA",
"UZBEKISTAN"                      = "UZBEKISTAN",
"WĘGRY"                           = "HUNGARY",
"WENEZUELA"                       = "VENEZUELA",
"WIELKA BRYTANIA"                 = "GREAT BRITAIN",
"WIETNAM"                         = "VIETNAM",
"WŁOCHY"                          = "ITALY",
"ZIMBABWE (RODEZJA)"              = "ZIMBABWE"
)
if (is.null(xx)) xx <- x
xx
}
) |> as.vector()
df_drunk
df_drunk <- df_drunk[, 1:8]
df_drunk <- read.csv("df_drunk")
# translating from ploish to english
df_drunk$citizenship <- sapply(df_drunk$citizenship, FUN = function (x) {
xx <- switch (x,
"ARABIA SAUDYJSKA"                = "SAUDI ARABIA",
"ARGENTYNA"                       = "ARGENTINA",
"AZERBEJDŻAN"                     = "AZERBAIJAN",
"BANGLADESZ"                      = "BANGLADESH",
"BELGIA"                          = "BELGIUM",
"BEZPAŃSTWOWIEC"                  = "STATELESS",
"BIAŁORUŚ"                        = "BELARUS",
"BOŚNIA I HERCEGOWINA"            = "BOSNIA AND HERZEGOVINA",
"BRAZYLIA"                        = "BRAZIL",
"BUŁGARIA"                        = "BULGARIA",
"CHINY"                           = "CHINA",
"CHORWACJA"                       = "CROATIA",
"CZECHY"                          = "CZECH REPUBLIC",
"DANIA"                           = "DENMARK",
"DOMINIKANA"                      = "DOMINICAN REPUBLIC",
"EGIPT"                           = "EGYPT",
"FILIPINY"                        = "PHILIPINES",
"FINLANDIA"                       = "FINLAND",
"FRANCJA"                         = "FRANCE",
"GRECJA"                          = "GREECE",
"GRUZJA"                          = "GEORGIA",
"GWATEMALA"                       = "GUATEMALA",
"HISZPANIA"                       = "SPAIN",
"HOLANDIA"                        = "NETHERLANDS",
"INDIE"                           = "INDIA",
"IRLANDIA"                        = "IRELAND",
"IZRAEL"                          = "ISRAEL",
"JAPONIA"                         = "JAPAN",
"KAZACHSTAN"                      = "KAZAKHSTAN",
"KENIA"                           = "KENYA",
"KIRGISTAN (KIRGIZJA)"            = "KYRGYZSTAN",
"KONGO"                           = "CONGO", # WHICH CONGO!!
"KOREA POŁUDNIOWA"                = "SOUTH KOREA",
"KUWEJT"                          = "KUWAIT",
"LITWA"                           = "LITHUANIA",
"ŁOTWA"                           = "LATVIA",
"MAROKO"                          = "MOROCO",
"MEKSYK"                          = "MEXICO",
"MOŁDAWIA"                        = "MOLDOVA",
"NIEMCY"                          = "GERMANY",
"NORWEGIA"                        = "NORWAY",
"PALESTYNA"                       = "PALESTINE",
"POLSKA"                          = "POLAND",
"PORTUGALIA"                      = "PORTUGAL",
"ROSJA"                           = "RUSSIA",
"RUMUNIA"                         = "ROMANIA",
"SINGAPUR"                        = "SINGAPORE",
"SŁOWACJA"                        = "SLOVAKIA",
"SZWECJA"                         = "SWEDEN",
"TADŻYKISTAN"                     = "TAJIKISTAN",
"TUNEZJA"                         = "TUNISIA",
"TURCJA"                          = "TURKEY",
"TURKMENISTAN (TURKMENIA)"        = "TURKMENISTAN",
"UKRAINA"                         = "UKRAINE",
"USA (STANY ZJEDNOCZONE AMERYKI)" = "USA",
"UZBEKISTAN"                      = "UZBEKISTAN",
"WĘGRY"                           = "HUNGARY",
"WENEZUELA"                       = "VENEZUELA",
"WIELKA BRYTANIA"                 = "GREAT BRITAIN",
"WIETNAM"                         = "VIETNAM",
"WŁOCHY"                          = "ITALY",
"ZIMBABWE (RODEZJA)"              = "ZIMBABWE"
)
if (is.null(xx)) xx <- x
xx
}
) |> as.vector()
df_drunk <- df_drunk[, 2:9]
df_drunk
?write.csv
write.csv(x = df_drunk, file = "df_drunk", row.names = FALSE)
install.packages("singleRcapture")
remotes::install_github("https://github.com/ncn-foreigners/singleRcaptureExtra")
df_drunk$citizenship |> table()
table(df_drunk$citizenship) > 200
which(table(df_drunk$citizenship) > 200)
to_keep <- which(table(df_drunk$citizenship) > 200)
to_keep <- names(which(table(df_drunk$citizenship) > 200))
to_keep
df_drunk$citizenship <- ifelse(df_drunk$citizenship %in% to_keep, df_drunk$citizenship, "OTHER")
df_drunk
table(df_drunk$citizenship)
df_drunk
df_drunk$kpw |> table()
table(df_drunk$citizenship)
library(singleRcapture)
estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + previous_offences + citizenship,
)
estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + previous_offences + citizenship,
data = df_drunk,
model = ztpoisson()
)
estimatePopsize(
formula = counts ~ gender + age + I(age ^ 2) + previous_offences + citizenship,
data = df_drunk,
model = ztpoisson()
)
summary(estimatePopsize(
formula = counts ~ gender + age + I(age ^ 2) + previous_offences + citizenship,
data = df_drunk,
model = ztpoisson()
))
?controlMethod
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlMethod = controlMethod(verbose = 4),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2) + citizenship
)
)
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlMethod = controlMethod(verbose = 5),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2) + citizenship
)
)
summary(model)
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
),
controlMethod = controlMethod(
verbose = 5
),
popVar = "bootstrap",
controlPopVar = controlPopVar(
bootType = "semiparametric",
bootstrapVisualTrace = TRUE,
traceBootstrapSize = TRUE
)
)
135 / 7
138 / 7
134 / 7
132 / 7
133 / 7
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
),
popVar = "bootstrap",
controlPopVar = controlPopVar(
bootType = "semiparametric",
cores = 7,
B = 133
)
)
summary(model)
plot(model, plotType = "bootHist")
popSizeEst(model)
popSizeEst(model) |> str()
popSizeEst(model)$boot
summary(popSizeEst(model)$boot)
bb <- popSizeEst(model)$boot
bb[bb < 1e+7]
quantile(bb[bb < 1e+7], c(2.5, 97.5))
quantile(bb[bb < 1e+7], c(2.5, 97.5) / 100)
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
),
popVar = "bootstrap",
controlPopVar = controlPopVar(
bootType = "parametric",
cores = 7,
B = 133
)
)
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2) + citezenship
)
)
model <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2) + citizenship
)
)
BIC(model, modelAlt)
AIC(model, modelAlt)
c(AIC(model), AIC(modelAlt))
library(lrtest)
library(lmtest)
lrtest(model, modelAlt)
summary(model)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ gender + poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
)
)
c(AIC(model), AIC(modelAlt))
lrtest(model, modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 2)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
lrtest(model, modelAlt)
c(AIC(model), AIC(modelAlt))
c(BIC(model), BIC(modelAlt))
summary(marginalFreq(model))
summary(marginalFreq(model), dropl5 = "group")
summary(marginalFreq(model), dropl5 = "group", df = 1)
summary(marginalFreq(modelAlt), dropl5 = "group", df = 1)
summary(model)
summary(modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 3) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
c(BIC(model), BIC(modelAlt))
c(AIC(model), AIC(modelAlt))
lrtest(model, modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2),
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
c(AIC(model), AIC(modelAlt))
c(BIC(model), BIC(modelAlt))
lrtest(model, modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 1) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoipoisson(),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
lrtest(model, modelAlt)
c(AIC(model), AIC(modelAlt))
c(BIC(model), BIC(modelAlt))
summary(modelAlt)
modelZtPois <- modelAlt
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = oiztpoisson(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
summary(modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = oiztpoisson(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 2),
data = df_drunk,
model = oiztpoisson(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
lrtest(model, modelAlt)
c(AIC(model), AIC(modelAlt))
c(BIC(model), BIC(modelAlt))
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = oiztpoisson(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 1) + citizenship,
data = df_drunk,
model = oiztpoisson(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
lrtest(model, modelAlt)
c(AIC(model), AIC(modelAlt))
summary(model)
summary(modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoigeom(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 1) + citizenship,
data = df_drunk,
model = ztoigeom(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
summary(model)
summary(modelAlt)
c(BIC(model), BIC(modelAlt))
c(AIC(model), AIC(modelAlt))
lrtest(model, modelAlt)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoigeom(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
modelAlt <- estimatePopsize(
formula = counts ~ poly(age, degree = 2),
data = df_drunk,
model = ztoigeom(omegaLink = "cloglog"),
controlModel = controlModel(
omegaFormula = ~ gender + poly(age, degree = 3)
)
)
summary(model)
summary(modelAlt)
c(AIC(model), AIC(modelAlt))
lrtest(model, modelAlt)
lrtest(modelAlt, model)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztnegbin(),
controlMethod = controlMethod(verbose = 5)
)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztnegbin(),
controlMethod = controlMethod(
verbose = 5, stepsize = .5, momentumFactor = 1
)
)
model <- estimatePopsize(
formula = counts ~ poly(age, degree = 2) + citizenship,
data = df_drunk,
model = ztoinegbin(),
controlMethod = controlMethod(
verbose = 5, stepsize = .5, momentumFactor = 1
)
)
summary(model)
